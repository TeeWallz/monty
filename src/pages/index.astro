---
import Layout from "@layouts/2010Layout.astro";

import { getChumpData } from "@utils/getChumps";
const chumpData = await getChumpData();

const cooLinks = [
  {
    name: "Why Do Trucks Keep Smashing Into This Bridge?",
    url: "https://www.youtube.com/watch?v=HR7NivKqfzo",
  },
  {
    name: "Montague st Bridge by David Cosma",
    url: "https://www.youtube.com/watch?v=jaUo1KXIU1k",
  },
];
---

<link title="timeline-styles" rel="stylesheet" 
              href="https://cdn.knightlab.com/libs/timeline3/latest/css/timeline.css">

<script src="https://cdn.knightlab.com/libs/timeline3/latest/js/timeline.js" is:inline></script>

<script type="text/javascript" is:inline>
    // Wait for DOM and external script to be loaded before initializing Timeline
    window.addEventListener('DOMContentLoaded', function () {
      function initTimeline() {
        console.log('Attempting to initialize Timeline');
        if (typeof TL !== 'undefined' && typeof TL.Timeline !== 'undefined') {
            console.log('Timeline library is available');
            // Fetch JSON data from the provided URL and initialize Timeline
            fetch('timeline.json')
              .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
              })
              .then(timeline_json => {
                  var options = {
                    hash_bookmark: false,
                    initial_zoom: 4,
                    timenav_height_percentage: 40
                  }
                window.timeline = new TL.Timeline('timeline-embed', timeline_json, options);
              })
              .catch(error => {
                console.error('Failed to load timeline data:', error);
              });
        } else {
          setTimeout(initTimeline, 100);
        }
      }
      initTimeline();
    });
</script>

<Layout>
  <!-- Day Counter -->
  <div class="section section-width">
    <img
      src="/images/2010/general/FRboxing.gif"
      style="position: absolute; margin-right: 245px;"
    />

    <div class="day-counter-wrapper">
      <img class="wreath" src="/images/2010/general/wreath.png" />
      <div class="day-counter">{chumpData.chumps[0].data.streak}</div>
    </div>

    <div class="common-big-text">
      As of {chumpData.chumps[0].data.localisedDate}
    </div>
  </div>

  <!-- Latest chump -->
  <div class="section section-width">
    <div class="common-header-text">
      Current ''''<span
        ><img src="/images/2010/general/championredflaming2.gif" /></span
      >''''
    </div>
    <div class="chump-image-frame">
      <div class="chump-image-container">
        <img class="frame-ribbon" src="/images/2010/general/ribbon.png" />
        <!-- Dynamic Image/Video -->
        <!-- {% if extension == 'webm' %} -->
        <!-- <video width="320" height="320" autoplay muted loop> -->
        <!-- <source src="{{ chumps[0].image }}" type="video/webm" /> -->
        <!-- Your browser does not support the video tag. -->
        <!-- </video> -->
        <!-- {% else %} -->
        <img class="chump-image" src={chumpData.chumps[0].data.image} />
        <!-- {% endif %} -->
      </div>

      <img class="candle candle-left" src="/images/2010/general/candle.gif" />
      <img class="candle candle-right" src="/images/2010/general/candle.gif" />
    </div>
    <div class="chump-name common-big-text">
      <a href={chumpData.chumps[0].data.url} target="_blank"
        >{chumpData.chumps[0].data.name}</a
      >
    </div>
  </div>

  <!-- Stats -->
  <div class="section section-width">
    <div class="common-header-text">Stats</div>

    <div class="stats-wrapper">
      <!-- Left Image -->
      <div class="stats-image-div">
        <img
          class="stats-image"
          src="/images/2010/general/m_monster_scribbling_notes_md_nwm_v2.gif"
        />
      </div>

      <!-- Stats Table -->
      <div>
        <table class="stats-table">
          <tbody>
            <tr>
              <td class="text-align-right">Days Since Last:</td>
              <td
                >{chumpData.chumps[0].data.streak}
                {chumpData.chumps[0].data.streak === 1 ? "day" : "days"}</td
              >
            </tr>
            <tr>
              <td class="text-align-right">Last bout date:</td>
              <td>{chumpData.chumps[0].data.localisedDate}</td>
            </tr>
            <tr>
              <td class="text-align-right">Current Status:</td>
              <td>{chumpData.stats.streakStatus}</td>
            </tr>
            <tr>
              <td></td>
              <td></td>
            </tr>
            <tr>
              <td class="text-align-right">Average Streak:</td>
              <td>{chumpData.stats.average} days</td>
            </tr>
            <tr>
              <td class="text-align-right">Median Streak:</td>
              <td>{chumpData.stats.median} days</td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- Right Image -->
      <div class="stats-image-div">
        <img
          class="stats-image"
          src="/images/2010/general/mad_scientist_with_clipboard_anim_300_wht.gif"
          style="transform: scaleX(-1); -webkit-transform: scaleX(-1);"
        />
      </div>
    </div>
  </div>
  <!-- Timeline -->

<!-- History Section -->
<div class="section section-width">
  <div class="timeline-section">
    <div class="timeline-toggle-wrapper">
    <button id="timeline-toggle" class="timeline-toggle">View Fullscreen</button>
    </div>
    <div class="timeline-outer">
      <div id="timeline-embed"></div>
    </div>
    <button id="timeline-close" class="timeline-close">âœ• Close</button>
  </div>
</div>
  
<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize timeline
  const initTimeline = () => {
    if (typeof TL !== 'undefined') {
      fetch('timeline.json')
        .then(response => response.json())
        .then(data => {
          window.timeline = new TL.Timeline(
            'timeline-embed', 
            data, 
            {
              hash_bookmark: false,
              initial_zoom: 4,
              timenav_height_percentage: 40
            }
          );
        });
    } else {
      setTimeout(initTimeline, 100);
    }
  };
  initTimeline();

  // Fullscreen controls
  const toggleBtn = document.getElementById('timeline-toggle');
  const closeBtn = document.getElementById('timeline-close');
  const timelineOuter = document.querySelector('.timeline-outer');
  const body = document.body;

  const enterFullscreen = () => {
    timelineOuter.classList.add('timeline-fullscreen');
    body.style.overflow = 'hidden';
    toggleBtn.classList.add('timeline-toggle-fullscreen');
    toggleBtn.textContent = 'Exit Fullscreen';
    toggleBtn.removeEventListener('click', enterFullscreen);
    toggleBtn.addEventListener('click', exitFullscreen);
    if (window.timeline) {
      setTimeout(() => window.timeline.updateDisplay(), 400);
    }
  };

  const exitFullscreen = () => {
    timelineOuter.classList.remove('timeline-fullscreen');
    toggleBtn.classList.remove('timeline-toggle-fullscreen');
    toggleBtn.textContent = 'View Fullscreen';
    toggleBtn.removeEventListener('click', exitFullscreen);
    toggleBtn.addEventListener('click', enterFullscreen);
    body.style.overflow = '';
    if (window.timeline) {
      setTimeout(() => window.timeline.updateDisplay(), 100);
    }
  };

  toggleBtn.addEventListener('click', enterFullscreen);
  closeBtn.addEventListener('click', exitFullscreen);

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && timelineOuter.classList.contains('timeline-fullscreen')) {
      exitFullscreen();
    }
  });
});
</script>

  <!-- Links -->
  <div class="section section-width">
    <div class="common-header-text">Links which what I found cool</div>

    {
      cooLinks.map(item => {
        return (
          <div>
            <img
              style={{ width: "2em" }}
              src={"/images/2010/general/arrow33.gif"}
            />
            <a target="_blank" href={item.url}>
              {item.name}
            </a>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              aria-hidden="true"
              focusable="false"
              x="0px"
              y="0px"
              viewBox="0 0 100 100"
              width="15"
              height="15"
              className="icon outbound"
            >
              <path
                fill="currentColor"
                d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"
              />
              <polygon
                fill="currentColor"
                points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"
              />
            </svg>
          </div>
        );
      })
    }
  </div>
</Layout>
